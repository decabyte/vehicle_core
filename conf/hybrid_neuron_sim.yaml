pilot:
    controller:
        type: 'hybrid'
        feedforward_model: true
        neuron_model: true

        # position gains
        kpos: 1.0
        kposprev: 0.1
        kgamma: 1.0
        lim_pos: 5.0

        # velocity gains
        # ku: 0.01414
        ku: 0.020
        kw: 0.020
        # kr: 1.090
        kr: 1.50

        # default parameters
        #   self.ku = self.dt / np.sqrt(2.0 * (self.lim_pos**2))
        #   self.kw = self.dt / self.lim_pos
        #   self.kr = 1 / np.tanh(0.5 * np.pi)

        # neuron params
        A: [4, 4, 4, 4, 4, 4]
        B: [10, 10, 10, 10, 10, 10]
        D: [10, 10, 10, 10, 10, 10]

        # position gains
        pos_x: { kp: 0.250, ki: 0.000, kd: 0.0, lim: 0.1 }        # max out at 8 m
        pos_y: { kp: 0.500, ki: 0.000, kd: 0.0, lim: 0.1 }        # max out at 2 m
        pos_z: { kp: 0.500, ki: 0.005, kd: 0.0, lim: 0.1 }
        pos_k: { kp: 0.000, ki: 0.000, kd: 0.0, lim: 0.0 }
        pos_m: { kp: 1.273, ki: 0.050, kd: 0.0, lim: 2.5 }        # 4 / pi --> max out at 45 deg
        pos_n: { kp: 0.63661, ki: 0.0, kd: 0.0, lim: 0.0 }        # 2 / pi --> max out at 90 deg

        # velocity gains
        vel_u: { kp: 40.0, ki: 0.25, kd: 0.3, lim: 2.0, input_lim: 2 }
        vel_v: { kp: 20.0, ki: 0.25, kd: 0.3, lim: 2.0, input_lim: 1 }
        vel_w: { kp: 20.0, ki: 0.25, kd: 0.2, lim: 2.0, input_lim: 1 }
        vel_p: { kp: 0.00, ki: 0.00, kd: 0.0, lim: 2.0, input_lim: 1 }
        vel_q: { kp: 1.00, ki: 0.00, kd: 0.0, lim: 1.0, input_lim: 1 }
        vel_r: { kp: 40.0, ki: 0.25, kd: 0.1, lim: 2.0, input_lim: 1 }

        # depth compensation (takes into account trimming)
        offset_z: 2.5
        offset_m: 0.0
