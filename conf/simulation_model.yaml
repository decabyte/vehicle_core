# simulation_model configuration file -- FOR USE WITH SIMULATED VEHICLE ONLY
#
# this file contains the major parameters of the vehicle's model according to "Guidance and Control of Oceanic Vehicle"
# conventions. Make sure you understand the basic components before changing these values, you have been warned!

# NOTES:
#     The buoyancy term should be carefully adjusted cause is is dependent on the actual trim of the vehicle,
#     for this reason a good working value can be derived from the vehicle's weight and leaving the extra corrections
#     to the controller subsystem in terms of gains and offsets.
#
#     For simulation purposes the buoyancy it can be computed using formula:
#       B = rho * volume * 9.81    # buoyancy (N)
#
#     An early experiment measured this value to be 546.1106 for Nessie VII AUV but that value was depending on the
#     specific setup and trimming related to the experimental setup used for its measurement.
#
#     The COG and COB need a similar approach, in this case, they can be assumed to be in the same geometrical position
#     in order to avoid the generation of strong pitch forces when using this model with the actual vehicle. These terms
#     instead can be safely adjusted for simulation purposes.

sim:
    model:
        shape: 'cylindrical'        # approximation to use

        radius: 0.150               # m
        length: 1.700               # m
        volume: 0.12                # volume of the vehicle (m^3)

        mass: 60.0                  # kg
        weight: 588.6               # N
        buoyancy: 589.6             # N (was 593.6 in simulation)

        water_rho: 1025.0           # density (salt water) (kg/m^3)

        cog: [0.00, 0.00, 0.06]   # center of gravity
        cob: [0.00, 0.00, 0.00]     # center of buoyancy

        # quadratic drag coefficients (approximation for underwater vehicles)
        #   [x_uu, y_vv, z_ww, k_pp, m_qq, n_rr]
        quadratic_drag: [-31.8086, -222.8960, -263.4225, -0.000, -40.5265, -40.5265]


# approximations based on cylindrical shape
#
# inertia tensor wrt origin of vehicle [mass * length^2]
# ix = mass * (radius ** 2) * (1.0 / 2.0)
# iy = mass * (3 * (radius ** 2) + (length ** 2)) * (1.0 / 12.0)
# iz = mass * (3 * (radius ** 2) + (length ** 2)) * (1.0 / 12.0)
#
# added terms
# xu_dot = -0.1 * mass
# yv_dot = -np.pi * rho * (radius ** 2) * length
# zw_dot = -np.pi * rho * (radius ** 2) * length
# kp_dot = -np.pi * rho * (radius ** 4) * (1.0 / 4.0)
# mq_dot = -np.pi * rho * (radius ** 2) * (length ** 3) * (1.0 / 12.0)
# nr_dot = -np.pi * rho * (radius ** 2) * (length ** 3) * (1.0 / 12.0)
