<launch>
    <!-- this launch file starts the vehicle_pilot and the thruster_wrapper to inject faults in a running system -->

    <!-- load the simulation config -->
    <rosparam command="load" file="$(find vehicle_core)/conf/simulation_model.yaml"/>
    <rosparam command="load" file="$(find vehicle_core)/conf/vehicle_model.yaml"/>

     <!-- use autotuning PILIM controller if AUTO env is set -->
    <group if="$(optenv AUTO 0)">
        <!-- use model-based controller variant if MODEL env is set -->
        <group if="$(optenv MODEL 0)">
            <rosparam command="load" file="$(find vehicle_core)/conf/auto_sim_model.yaml" />
        </group>

        <group unless="$(optenv MODEL 0)">
            <rosparam command="load" file="$(find vehicle_core)/conf/auto_sim.yaml" />
        </group>
    </group>

    <!-- use classic PILIM controller if AUTO env is not set -->
    <group unless="$(optenv AUTO 0)">
        <!-- use model-based controller variant if MODEL env is set -->
        <group if="$(optenv MODEL 0)">
            <rosparam command="load" file="$(find vehicle_core)/conf/pid_sim_model.yaml" />
        </group>

        <group unless="$(optenv MODEL 0)">
            <rosparam command="load" file="$(find vehicle_core)/conf/pid_sim.yaml" />
        </group>
    </group>

    <!-- start the vehicle controller -->
    <node name="vehicle_pilot" pkg="vehicle_core" type="node_pilot.py" args="-v" output="screen">
        <!-- redirect output -->
        <param name="topic_output" value="thrusters/request"/>
    </node>

    <!-- start the thruster wrapper -->
    <node name="thruster_wrapper" pkg="vehicle_core" type="node_thruster_wrapper.py" output="screen">
        <!-- set topics input and outputs -->
        <param name="req_input" value="thrusters/request"/>
        <param name="req_output" value="thrusters/commands"/>

        <param name="feed_input" value="thrusters/status"/>
        <param name="feed_output" value="thrusters/feedback"/>
    </node>

</launch>